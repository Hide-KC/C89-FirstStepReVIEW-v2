= 技術書を書くということ

TODO mhidaka

== Re:VIEWとは？

TODO mhidaka

== なぜRe:VIEWを選ぶべきか

#@# NOTE author:vvakame

=== 技術的要求

世の中にはMicrosoft WordやMarkdown、textile、reStructuredText、AsciiDoc、LaTeXなどさまざまな形式があります。
その中で、なぜRe:VIEWで技術書を書くべきなのでしょうか。

技術書を書くためにあるとよい機能を挙げていきます。

 * 文書の共有とリビジョン管理が行い易い

プログラムのソースコードと同様に、文書もリビジョン管理があると便利です。
いつ誰がどう変更したかを追跡できたり、いつどのくらいの分量を書いたかが分かるのは便利です。
いらないのではないか？と思った節をバッサリ削ったり、いやいややっぱり戻そう…と考えなおし元に戻すのも自由自在です。

 * GitHubとの親和性がよい

原稿についても、pull requestを使って改善の提案を受け取ったり、レビューを受け取るのは便利です。
また、Travis CIやCircle CI、その他Re:VIEW専用CIなどを利用し、pushするたびにPDFを生成させたりすることもできるようになります。

 * コメントを利用することができる

メモ書きをしたり、他人の原稿にレビューを書き込む時などに使います。
@<code>{原稿の○行目に対する指摘 > わかる→分かる に置き換え}という風に原稿とレビュー結果を別々の場所に書くのは大変不便です。
レビュー結果はコメントを使い原稿にインラインに書き込んでいくと楽です。

 * HTMLやPDF、epubなど複数の形式に変換できる

文章を書いた後、Webサイトとして公開したい場合、印刷所に入稿したい場合、電子書籍として配布したい場合などさまざまなシチュエーションがあります。
そのため、形式変換ができるツールがあるものがよいでしょう。

 * 文書の構造自体と見た目（スタイル）についての設定が分離されている

GUIツールにありがちですが、そのツールを使う人の練度に文書構造自体の質が左右される場合があります。
たとえば、章タイトルの文字をでかくしたい時、文字を大きく太くするのと、そこが見出しという文書構造の1部分であると設定するのは全く違うことです。
しかし、見た目としては変わりがない場合、単に文字をでかくして終わってしまう人がいます。
そのような文章は目次の自動生成や、複数形式に出力した時の出来栄えに難があります。
使わないでね！と伝えて済む場合もありますが、それよりも根本的にそれを行う方法が1つしかないツールを使うほうが楽です。

=== Re:VIEWの事情

Re:VIEWというツール自体、出版を生業としている方々が作っているため本を書くための考慮や工夫が詰まっています。
そして、今までたくさんの本の製作に使われてきた実績@<fn>{archievement}があるため、そうそう落とし穴に落ちたりすることもありません。
また、日本人が作っているつーるだけあり、日本固有の事情も考慮されています。
私達はRe:VIEWを使うだけで先人たちの知恵を活用することができます。

//footnote[archievement][Re:VIEWの利用実績 @<href>{https://github.com/kmuto/review/wiki/%E5%88%A9%E7%94%A8%E5%AE%9F%E7%B8%BE}]
